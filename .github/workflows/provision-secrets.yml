name: Provision Portainer Secrets

# Allows you to run this workflow manually from the Actions tab
on:
  workflow_dispatch:
    inputs:
      secret_name:
        description: 'The name of the secret to create in Portainer (e.g., jupyter_db_password)'
        required: true
      github_secret_to_use:
        description: 'The name of the GitHub Secret to read the value from (e.g., DB_PASSWORD)'
        required: true
        type: choice
        options:
        - DOMAIN
        - HOST_DATA_PATH
        - HOST_NOTEBOOKS_ROOT
        # Add other secrets here to create a dropdown in the UI

jobs:
  create-portainer-secret:
    runs-on: ubuntu-latest
    steps:
      - name: Create Secret in Portainer
        env:
          PORTAINER_HOST: ${{ secrets.PORTAINER_HOST }}
          PORTAINER_USERNAME: ${{ secrets.PORTAINER_USERNAME }}
          PORTAINER_PASSWORD: ${{ secrets.PORTAINER_PASSWORD }}
          SECRET_NAME: ${{ github.event.inputs.secret_name }}
          SECRET_VALUE: ${{ secrets[github.event.inputs.github_secret_to_use] }}
        run: |
          # First, authenticate and get JWT token
          echo "Authenticating with Portainer..."
          echo "Host: ${PORTAINER_HOST}"
          echo "Username: ${PORTAINER_USERNAME}"
          echo "Username length: ${#PORTAINER_USERNAME}"
          
          # Debug: Check for any hidden characters
          echo "Username hex dump:"
          echo -n "${PORTAINER_USERNAME}" | hexdump -C
          
          AUTH_RESPONSE=$(curl -s -X POST "https://${PORTAINER_HOST}/api/auth" \
            -H "Content-Type: application/json" \
            --data "{\"Username\":\"${PORTAINER_USERNAME}\",\"Password\":\"${PORTAINER_PASSWORD}\"}")
          
          JWT_TOKEN=$(echo $AUTH_RESPONSE | jq -r '.jwt')
          
          if [ "$JWT_TOKEN" = "null" ] || [ -z "$JWT_TOKEN" ]; then
            echo "❌ Failed to get JWT token"
            echo "Auth response: $AUTH_RESPONSE"
            exit 1
          fi
          
          echo "✅ JWT token obtained"
          
          # Base64 encode the secret value
          SECRET_VALUE_B64=$(echo -n "$SECRET_VALUE" | base64 -w 0)
          
          # Create the secret using JWT token
          JSON_PAYLOAD=$(printf '{"Name": "%s", "Data": "%s"}' "$SECRET_NAME" "$SECRET_VALUE_B64")
          
          echo "Creating secret: $SECRET_NAME"
          
          RESPONSE=$(curl -s -S -X POST "https://${PORTAINER_HOST}/api/endpoints/1/docker/secrets/create" \
            -H "Authorization: Bearer ${JWT_TOKEN}" \
            -H "Content-Type: application/json" \
            --data "${JSON_PAYLOAD}")
          
          echo "Response: $RESPONSE"
          
          if echo "$RESPONSE" | jq -e '.ID' > /dev/null 2>&1; then
            echo "✅ Secret '$SECRET_NAME' created successfully!"
          else
            echo "❌ Failed to create secret"
            exit 1
          fi