name: Provision Portainer Secrets

# Allows you to run this workflow manually from the Actions tab
on:
  workflow_dispatch:
    inputs:
      secret_name:
        description: 'The name of the secret to create in Portainer (e.g., jupyter_db_password)'
        required: true
      github_secret_to_use:
        description: 'The name of the GitHub Secret to read the value from (e.g., DB_PASSWORD)'
        required: true
        type: choice
        options:
        - DOMAIN
        - HOST_DATA_PATH
        - HOST_NOTEBOOKS_ROOT
        # Add other secrets here to create a dropdown in the UI

jobs:
  create-portainer-secret:
    runs-on: ubuntu-latest
    steps:
      - name: Create Secret in Portainer
        env:
          PORTAINER_HOST: ${{ secrets.PORTAINER_HOST }}
          PORTAINER_API_KEY: ${{ secrets.PORTAINER_API_KEY }}
          SECRET_NAME: ${{ github.event.inputs.secret_name }}
          SECRET_VALUE: ${{ secrets[github.event.inputs.github_secret_to_use] }}
        run: |
          # Use printf and a pipe to jq to safely create the JSON payload
          # This prevents the secret value from appearing in the shell's history or process list
          JSON_PAYLOAD=$(printf '{"Name": "%s", "Secret": "%s"}' "$SECRET_NAME" "$SECRET_VALUE")

          echo "Creating secret: $SECRET_NAME"

          # Make the API call to Portainer
          curl -s -S -X POST "https://${PORTAINER_HOST}/api/secrets" \
            -H "X-API-Key: ${PORTAINER_API_KEY}" \
            -H "Content-Type: application/json" \
            --data "${JSON_PAYLOAD}"

          echo "Secret creation request sent."